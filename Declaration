Arrays in C
An array is a collection of elements of the same data type, stored in contiguous memory locations. Arrays allow us to store multiple values in a single variable, which can be accessed using an index.

Declaration and Initialization
To declare an array, you specify the data type, the name of the array, and the number of elements it can hold. Hereâ€™s an example of declaring an integer array with 5 elements:

c
Copy code
int Array[5]; // Declares an array named Array with space for 5 integers
In this case:

int specifies that the array holds integer values.
Array is the name of the array.
[5] specifies that the array can store 5 elements, indexed from 0 to 4.
Initializing an Array
You can initialize an array at the time of declaration by providing values in curly braces:

c
Copy code
int Array[5] = {1, 2, 3, 4, 5}; // Initializes the array with values 1, 2, 3, 4, and 5
Alternatively, you can partially initialize an array. If you provide fewer values than the declared size, the remaining elements are set to zero by default:

c
Copy code
int Array[5] = {1, 2}; // Initializes the first two elements; remaining elements are 0
// Result: {1, 2, 0, 0, 0}
If the size is omitted, the array size will be inferred from the number of initial values:

c
Copy code
int Array[] = {1, 2, 3}; // Array size is automatically set to 3
Accessing Array Elements
Array elements are accessed using their index, with indexing starting from 0:

c
Copy code
int firstElement = Array[0]; // Accesses the first element (1)
int secondElement = Array[1]; // Accesses the second element (2)
You can also modify elements by assigning new values to specific indexes:

c
Copy code
Array[0] = 10; // Sets the first element to 10
Common Array Operations
Traversing: Loop through each element, often with a for loop:

c
Copy code
for (int i = 0; i < 5; i++) {
    printf("%d ", Array[i]); // Prints each element
}
Finding the Size: Calculate the number of elements in an array by dividing the total size of the array by the size of a single element:

c
Copy code
int size = sizeof(Array) / sizeof(Array[0]);
Multi-Dimensional Arrays: Arrays with more than one dimension, such as matrices, are useful for storing tabular data:

c
Copy code
int matrix[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
// A 3x3 matrix (2D array)
Summary
Arrays are a fundamental data structure in C, providing a simple way to manage lists of data. They are particularly useful when you need efficient access to a series of elements and can work with multi-dimensional structures for more complex data organizations. Remember that array indexing in C starts from 0, and accessing an out-of-bounds index may lead to undefined behavior.









